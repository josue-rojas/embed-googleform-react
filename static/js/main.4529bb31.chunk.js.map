{"version":3,"sources":["images/image_0.jpg","images/image_1.jpg","images/image_2.jpg","images/image_3.jpg","images/image_4.jpg","components/Slideshow.js","components/Input.js","components/Iframe.js","helpers/inputCheck.js","components/SlideupPanel.js","helpers/inputFunctions.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Slideshow","props","state","index","timer","update","bind","this","setInterval","slideshowDelay","clearInterval","images","length","setState","slide","i","push","key","className","style","backgroundImage","opacity","createSlide","children","React","Component","TextInput","isFocus","newFocus","extraClass","hasError","title","name","disabled","type","autoComplete","autocomplete","onFocus","toggleFocus","onBlur","placeholder","value","onChange","Iframe","ref","createRef","current","addEventListener","onLoad","hasInput","val","emailCheck","test","SlideupPanel","locationHash","isActive","email","message","form_message","isSubmitting","changeWindow","toggleActive","onInputChange","submitForm","submitEnd","mainContent","altContent","getContent","checkInput","window","removeEventListener","location","hash","e","inputKey","inputState","target","event","errors","valuesChange","errorCount","valuesSubmit","typeof","parseInt","checkAllInputs","preventDefault","id","display","onSubmit","method","action","submitButton","href","onClick","imagesURL","image0","image1","image2","image3","image4","SlideshowMessage","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4529bb31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image_0.c11b1245.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image_1.b92bd656.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image_2.0bbda01e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image_3.d5c19519.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image_4.7d8e1fe3.jpg\";","import React from 'react';\nimport '../styles/Slideshow.css';\n\nexport default class Slideshow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { index: 0 };\n    this.timer = null;\n    this.update = this.update.bind(this);\n  }\n\n  componentWillMount() {\n    this.timer = setInterval(this.update, (this.props.slideshowDelay || 4000))\n  }\n\n  compentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  update() {\n    let index = (this.state.index + 1) % this.props.images.length;\n    this.setState({ index: index });\n  }\n\n  createSlide(images) {\n    let slide = [];\n    for(let i = 0; i < images.length; i++) {\n      slide.push(\n        <div\n          key={`slide-${i}`}\n          className='slide'\n          style={{\n            backgroundImage: `url(${images[i]})`,\n            opacity: (this.state.index === i ? 1 : 0)\n          }}></div>\n      );\n    }\n    return slide;\n  }\n\n  render() {\n    return (\n      <div className='slideshow'>\n        { this.createSlide(this.props.images) }\n        <div className='children mobile-only'>\n          { this.props.children }\n        </div>\n      </div>\n    )\n  }\n}\n","// taken from https://raw.githubusercontent.com/josuerojasrojas/TTP-FS/master/src/Components/Inputs.js\n\nimport React from 'react';\nimport '../styles/Input.css';\n// import Tooltip from './Tooltip';\n\nexport default class TextInput extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      isFocus: false,\n    }\n  }\n\n  toggleFocus(isFocus){\n    let newFocus = typeof isFocus === 'boolean' ? isFocus : !this.state.isFocus;\n    this.setState({\n      isFocus: newFocus\n    });\n  }\n\n  render(){\n    let extraClass = this.state.isFocus ? 'focus ' : '';\n    extraClass += this.props.hasError ? ' error ' : '';\n    extraClass += this.props.className ? this.props.className: '';\n    return(\n      <div className={`text-input input ${extraClass}`}>\n        <label>{this.props.title}</label>\n        <input\n          name={this.props.name || ''}\n          disabled={this.props.disabled ? 'disabled' : ''}\n          type={this.props.type || 'text'}\n          autoComplete={this.props.autocomplete ? 'on' : \"off\"}\n          onFocus={()=>this.toggleFocus(true)}\n          onBlur={()=>this.toggleFocus(false)}\n          placeholder={this.props.placeholder}\n          value={this.props.value}\n          onChange={this.props.onChange}/>\n      </div>\n    )\n  }\n}\n\n// to use in your component your inputs must have tooltip ex: input: {val: '', tooltip: ''}\n// a state must have previousTooltip which is a string of the name of the previous input\n// and finally the object mus have a global var to keep the timer for the helper\n// it should be called this.clearTooltipTimer\n\n// to update an input with a tooltip\n// you need to use the tooltipHelpers for different task\n// when you are goint to update the input with a tooltips\n// you need to clear the the timer\n// clearTimeout(this.clearTooltipTimer);\n// then update set the state for new tooltips\n// and then if there exist a previousTooltip use the helper clearPrevTooltip function\n// to create a timer to clear the tooltip so it won't appear in every update (like when typing an input)\n\n// ex: updating to a state that has tooltip (the flow)\n // 1. modify state to add tooltip message\n// let newState = {...this.state}\n// let newState.inputName.tooltip = 'a message'\n// 2. clear any clearTooltipTimer that may be running\n// clearTimeout(this.clearTooltipTimer);\n// 3. set the new state with the tooltip message\n// this.setState(newState);\n// 4. and finally call the helper function to clear the tooltip later (2300 ms)\n// this will stop it from showing up again\n// if(newState.previousTooltip){\n//   clearPrevTooltip(this);\n// }\n\n// this might have limitations: like (i haven't tested) it probably only handles only one tooltip change\n// since the previousTooltip var only holds a (one) string\n\n// a textinput but with tooltip for messages\n// export class TextInputWithTooltip extends TextInput{\n//   render(){\n//     let extraClass = this.state.isFocus ? 'focus' : '';\n//     extraClass += this.props.hasError ? ' error' : '';\n//     return(\n//       <div className={`text-input input ${extraClass} ${this.props.className}`}>\n//         <Tooltip message={this.props.tooltipMessage}/>\n//         <label>{this.props.title}</label>\n//         <input\n//           disabled={this.props.disabled ? 'disabled' : ''}\n//           autoComplete={this.props.autocomplete ? 'on' : \"off\"}\n//           type={this.props.type || 'text'}\n//           onFocus={()=>this.toggleFocus(true)}\n//           onBlur={()=>this.toggleFocus(false)}\n//           placeholder={this.props.placeholder}\n//           value={this.props.value}\n//           onChange={this.props.onChange}/>\n//       </div>\n//     )\n//   }\n// }\n\n// there exist a input checkbox but i rather make a custom one\n// much simpler though, it's either checked or not (no value)\n// export function CheckBox(props){\n//   const checkedClass = props.isChecked ? 'checked' : '';\n//   return(\n//     <div className={`checkbox ${props.className || ''}`}>\n//       <div\n//         onClick={props.onClick}\n//         className={`check ${checkedClass} ${props.hasError ? 'error' : ''}`}></div>\n//       {props.text}\n//     </div>\n//   )\n// }\n","// code from https://gist.github.com/iest/3b571a6ddcdd9ddab3cf\n\nimport React from 'react';\n\nexport default class Iframe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this.ref.current.addEventListener('load', this.props.onLoad);\n  }\n\n  render() {\n    return <iframe title='iframe' ref={this.ref} {...this.props}/>\n  }\n}\n","// stolen from https://raw.githubusercontent.com/josuerojasrojas/TTP-FS/master/src/Helpers/InputsCheck.js\n\n// check has an input\nexport function hasInput(val){\n  return val.length > 0;\n}\n\n// check email is valid\nexport function emailCheck(val){\n  return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(val);\n}\n\nexport function passwordCheck(val){\n  return true;\n}\n\nexport function isWholeNumber(val){\n  if(isNaN(val)) return false;\n  let num = parseFloat(val);\n  return num % 1  === 0 && num > 0;\n}\n\nexport function isNumber(val){\n  return !isNaN(val)\n}\n","// some code stolen from https://raw.githubusercontent.com/josuerojasrojas/TTP-FS/master/src/Helpers/InputFunctions.js\n\nimport React from 'react';\nimport '../styles/SlideupPanel.css';\nimport TextInput from './Input';\nimport Iframe from './Iframe';\nimport { hasInput, emailCheck } from '../helpers/inputCheck';\nimport { checkAllInputs } from '../helpers/inputFunctions';\n\n\n// a panel that hides in mobile...\nexport default class SlideupPanel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      locationHash: \"\",\n      isActive: false,\n      name: {\n        val: '',\n        hasError: false\n      },\n      email: {\n        val: '',\n        hasError: false,\n      },\n      message: {\n        val: '',\n        hasError: false\n      },\n      form_message: '',\n      isSubmitting: false,\n    };\n    this.changeWindow = this.changeWindow.bind(this);\n    this.toggleActive = this.toggleActive.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.submitEnd = this.submitEnd.bind(this);\n    this.mainContent = this.mainContent.bind(this);\n    this.altContent = this.altContent.bind(this);\n    this.getContent = this.getContent.bind(this);\n    this.checkInput = {\n      name: hasInput,\n\t\t\temail: emailCheck,\n      message: hasInput\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", this.changeWindow, false);\n    this.changeWindow();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"hashchange\", this.changeWindow, false);\n  }\n\n  changeWindow() {\n    this.setState({ locationHash: window.location.hash });\n  }\n\n  toggleActive() {\n    this.setState({ isActive: !this.state.isActive });\n  }\n\n  onInputChange(e, inputKey){\n    let inputState = { ...this.state[inputKey] };\n    inputState.val = e.target.value;\n    inputState.hasError = !this.checkInput[inputKey](e.target.value);\n    this.setState({\n      [inputKey]: inputState,\n      form_message: ''\n\n    });\n  }\n\n  submitForm(event) {\n    let errors = checkAllInputs(this.checkInput, this.state);\n    if(errors) {\n      this.setState(errors);\n      return event.preventDefault();\n    }\n    this.setState({ isSubmitting: true });\n    return true;\n  }\n\n  // aftter sending the form we reset the values and give a small message\n  submitEnd() {\n    this.setState({\n      name: {\n        val: '',\n        hasError: false\n      },\n      email: {\n        val: '',\n        hasError: false,\n      },\n      message: {\n        val: '',\n        hasError: false\n      },\n      form_message: 'Thank you for signing up to do something! You are on the right steps to doing something about it.',\n      isSubmitting: false,\n    });\n  }\n\n  // i didnt want to bother creating another component so here is function\n  mainContent() {\n    return (\n      <div className='main'>\n        <h1 className='title alt-font'>{this.props.title}</h1>\n        <p className='message'>{this.props.message}</p>\n        <Iframe name='hidden_iframe' id=\"hidden_iframe\" style={{ display : 'none'}} onLoad={this.submitEnd} />\n        <form\n          className='form'\n          target=\"hidden_iframe\"\n          onSubmit={this.submitForm}\n          method='post'\n          action='https://docs.google.com/forms/d/e/1FAIpQLSe11JrlpmSRi90DwHD2Zfq_H8bBZsSScRhrHztqE1rX4OecyA/formResponse'>\n          <TextInput\n            name='entry.1255219325'\n            title='Name'\n            placeholder='Your Name'\n            value={this.state.name.val}\n            hasError={this.state.name.hasError}\n            onChange={(e) => this.onInputChange(e, 'name')} />\n          <TextInput\n            name='entry.680077576'\n            title='E-mail'\n            type='email'\n            value={this.state.email.val}\n            placeholder='example@google.com'\n            hasError={this.state.email.hasError}\n            onChange={(e) => this.onInputChange(e, 'email')} />\n          <TextInput\n            name='entry.925890475'\n            title='Message'\n            placeholder='A quick message'\n            value={this.state.message.val}\n            hasError={this.state.message.hasError}\n            onChange={(e) => this.onInputChange(e, 'message')} />\n          {this.submitButton(this.state.isSubmitting)}\n        </form>\n        <div className='message'>\n          {this.state.form_message}\n        </div>\n        <footer>\n          <a href='./#terms'>Terms and Conditions</a>\n        </footer>\n      </div>\n    );\n  }\n\n  altContent() {\n    return (\n      <div className='main'>\n        <a className='button' href='./#'>Back</a>\n        <p className='terms'>\n          To be, or not to be, that is the question:\n          Whether 'tis nobler in the mind to suffer\n          The slings and arrows of outrageous fortune,\n          Or to take arms against a sea of troubles\n          And by opposing end them. To die—to sleep,\n          No more; and by a sleep to say we end\n          The heart-ache and the thousand natural shocks\n          That flesh is heir to: 'tis a consummation\n          Devoutly to be wish'd. To die, to sleep;\n          To sleep, perchance to dream—ay, there's the rub:\n          For in that sleep of death what dreams may come,\n          When we have shuffled off this mortal coil,\n          Must give us pause—there's the respect\n          That makes calamity of so long life.\n          For who would bear the whips and scorns of time,\n          Th'oppressor's wrong, the proud man's contumely,\n          The pangs of dispriz'd love, the law's delay,\n          The insolence of office, and the spurns\n          That patient merit of th'unworthy takes,\n          When he himself might his quietus make\n          With a bare bodkin? Who would fardels bear,\n          To grunt and sweat under a weary life,\n          But that the dread of something after death,\n          The undiscovere'd country, from whose bourn\n          No traveller returns, puzzles the will,\n          And makes us rather bear those ills we have\n          Than fly to others that we know not of?\n          Thus conscience does make cowards of us all,\n          And thus the native hue of resolution\n          Is sicklied o'er with the pale cast of thought,\n          And enterprises of great pitch and moment\n          With this regard their currents turn awry\n          And lose the name of action.\n        </p>\n      </div>\n    )\n  }\n\n  // a function to render the submit button (again i dont want to create another component which might be a bad idea)\n  submitButton(isSubmitting) {\n    return (\n      <div className='button-wrapper'>\n        <input\n          className='button'\n          type=\"submit\"\n          value=\"Submit\"\n          disabled={isSubmitting}/>\n        <div className={`loader ${isSubmitting ? 'show' : 'hide'}`}></div>\n      </div>\n    )\n  }\n\n  getContent(hash) {\n    // should probably use a switch (cause of speed)...\n    return hash === '#terms' ? this.altContent() : this.mainContent();\n  }\n\n  render() {\n    return(\n      <div className={`slideup-panel ${this.state.isActive ? 'show' : 'hidden'}`}>\n        <div className='mobile-only menu-button' onClick={this.toggleActive}>\n          { this.state.isActive ? 'Close' : 'Sign Up' }\n        </div>\n        {this.getContent(this.state.locationHash)}\n      </div>\n    )\n  }\n}\n","// stolen from https://raw.githubusercontent.com/josuerojasrojas/TTP-FS/master/src/Helpers/InputFunctions.js\n\n// functions for inputs that are here to remove repetetiveness\n// basically functions that are reused\n\n\n// return object of valueChaneschanges if there are any errors in inputs\n// else just return false for no errors\n// takes in:\n// checkInput: object of { nameofInput: function to validate }\n// state: object of current state of the inputs: ex {email: { val: 'sdh', hasError: false}, password: { val: '', hasError: true }}\n// note: state does not have to have errors correct cause this will check them all.\nexport function checkAllInputs(checkInput, state, ){\n  let valuesChange = {};\n\t\tlet errorCount = 0;\n\t\tlet valuesSubmit = {};\n\t\tfor (let key in checkInput) {\n\t\t\tlet inputState = {...state[key]};\n\t\t\tinputState.hasError = !checkInput[key](inputState.val);\n\t\t\tif(inputState.hasError){\n\t\t\t\terrorCount++;\n\t\t\t\tvaluesChange[key] = inputState;\n\t\t\t}\n\t\t\t// some inputs are integers so we convert them here (errorcount and setState in the next lines should fix any values that are not valid)\n\t\t\tvaluesSubmit[key] = inputState.typeof === 'Integer' ? parseInt(inputState.val, 10) : inputState.val;\n\t\t}\n\t\tif (errorCount > 0) {\n      return valuesChange\n\t\t}\n    return false;\n}\n\n// function that handles changes for any input type text or similar\n// returns object of change\n// parameters:\n// e: e from onchange function\n// inputKey: key to find value in state of input values\n// state: state of keys, formatted like ex {email: { val: 'sdh', hasError: false}, password: { val: '', hasError: true }}\n// checkInput: object of { nameofInput: function to validate }\nexport function handleOnChange(e, inputKey, state, checkInput){\n  let inputState = { ...state[inputKey] };\n  inputState.val = e.target.value;\n  inputState.hasError = !checkInput[inputKey](e.target.value);\n  return inputState;\n}\n\n// does handleOnChange()\n// and sets clears tooltips\n// it is also repeated code in SignupForm and SigninForm\nexport function onInputChangeTooltip(e, inputKey, thisScope){\n  let inputState = handleOnChange(e, inputKey, thisScope.state, thisScope.checkInput);\n  let newStateUpdate = { [inputKey]: inputState };\n  // in case there is a tooltip\n  if(thisScope.state.previousTooltip) {\n    newStateUpdate[thisScope.state.previousTooltip] = { ...thisScope.state[thisScope.state.previousTooltip] };\n    newStateUpdate[thisScope.state.previousTooltip].tooltip = '';\n    newStateUpdate.previousTooltip = '';\n  }\n  thisScope.setState(newStateUpdate);\n}\n","import React from 'react';\nimport '../styles/App.css';\nimport Slideshow from './Slideshow';\nimport SlideupPanel from './SlideupPanel';\n\nimport image0 from '../images/image_0.jpg';\nimport image1 from '../images/image_1.jpg';\nimport image2 from '../images/image_2.jpg';\nimport image3 from '../images/image_3.jpg';\nimport image4 from '../images/image_4.jpg';\nconst imagesURL = [image0, image1, image2, image3, image4];\n\nconst title = 'Something Co.';\nconst message = 'If you want something then do something about it. Sign up now!';\n\nfunction SlideshowMessage(props) {\n  return (\n    <div className='slideshow-message'>\n      <h1 className='title alt-font'>{props.title}</h1>\n      <p className='smessage'>{props.message}</p>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Slideshow\n        images={imagesURL}>\n        <SlideshowMessage\n          title={title}\n          message={message}/>\n      </Slideshow>\n      <div className='main-app'>\n        <SlideupPanel\n          title={title}\n          message={message}/>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}